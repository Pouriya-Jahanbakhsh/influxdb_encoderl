%% Auto-generated by https://github.com/Pouriya-Jahanbakhsh/estuff
%% -----------------------------------------------------------------------------
-module(influxdb_encoderl_SUITE).
-author('pouriya.jahanbakhsh@gmail.com').
%% -----------------------------------------------------------------------------
%% Exports:

%% ct callbacks:
-export([init_per_suite/1
        ,end_per_suite/1
        ,all/0
        ,init_per_testcase/2
        ,end_per_testcase/2]).

%% Testcases:
-export(['1'/1]).

%% -----------------------------------------------------------------------------
%% Records & Macros & Includes:

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%% -----------------------------------------------------------------------------
%% ct callbacks:


all() ->
    ToInteger =
        fun
            ({Func, 1}) ->
                try
                    erlang:list_to_integer(erlang:atom_to_list(Func))
                catch
                    _:_ ->
                        0
                end;
            (_) -> % Arity > 1 | Arity == 0
                0
        end,
    % contains 0 for other functions:
    Ints = [ToInteger(X) || X <- ?MODULE:module_info(exports)],
    % 1, 2, ...
    PosInts = lists:sort([Int || Int <- Ints, Int > 0]),
    % '1', '2', ...
    [erlang:list_to_atom(erlang:integer_to_list(X)) || X <- PosInts].


init_per_suite(Cfg) ->
    application:start(sasl),
    Cfg.


end_per_suite(Cfg) ->
    application:stop(sasl),
    Cfg.


init_per_testcase(_TestCase, Cfg) ->
    Cfg.


end_per_testcase(_TestCase, _Cfg) ->
    ok.

%% -----------------------------------------------------------------------------
%% Test cases:


'1'(Cfg) ->
    _ = Cfg,
    ?assertEqual(["key"," ",["value=",["10",[]]],[],"\n"], influxdb_encoderl:encode({key, 10})),
    ?assertMatch("key value=10 " ++ _, influxdb_encoderl:encode({key, 10}, #{return_type => string, set_timestamp => true})),
    ?assertMatch("key,tag=tag_value value=10 " ++ _, influxdb_encoderl:encode({key, 10, #{tag => tag_value}}, #{return_type => string, set_timestamp => true})),
    TS = {1,1,1},
    Data = [
        {<<"foo">>, 10},
        {"bar", 1.0, TS},
        {baz, 3.14, #{tag => tag_value}, 1000001000001000},
        {qux, <<"oops">>, [{tag, tag_value}, {tag2, tag2_value}]},
        {"p", #{k => v, <<"k2">> => true, "k3" => 100, <<"k4">> => false, "hello" => "world"}},
        {"A", #{k => v, <<"k2">> => true, "k3" => 100}},
        {"x", "y", 1000001000001000}
    ],
    ?assertEqual(
        <<
            "foo value=10\n"
            "bar value=1.0 1000001000001000\n"
            "baz,tag=tag_value value=3.14 1000001000001000\n"
            "qux,tag=tag_value,tag2=tag2_value value=oops\n"
            "p k=v,hello=world,k3=100,k2=t,k4=f\nA k=v,k3=100,k2=t\n"
            "x value=y 1000001000001000\n"
        >>,
        influxdb_encoderl:encode(Data, #{return_type => binary})
    ),
    ?assertEqual(
        "foo value=10i\n"
        "bar value=1.0 1000001000001000\n"
        "baz,tag=tag_value value=3.14 1000001000001000\n"
        "qux,tag=tag_value,tag2=tag2_value value=oops\n"
        "p k=v,hello=world,k3=100i,k2=t,k4=f\nA k=v,k3=100i,k2=t\n"
        "x value=y 1000001000001000\n",
        influxdb_encoderl:encode(Data, #{return_type => string, encode_integer => true})
    ),
    ok.
